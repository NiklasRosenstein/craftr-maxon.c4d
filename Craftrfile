# Copyright (C) 2016  Niklas Rosenstein
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>

__all__ = []

import functools
import os
import re

session.options.setdefault('rtti', options.rtti)

# Derive default option values and validat them.
if platform.name not in ('win', 'mac', 'linux'):
  error('unsupported platform: {!r}'.format(platform.name))

@functools.lru_cache()
def get_c4d_path_and_release():
  path = (options.directory or __file__) + '/'
  match = re.search(r'(.*Cinema\s+4D\s+R(\d+).*?[/\\])', path, re.I)
  if not match:
    error('C4D installation path could not be determined')
  return match.groups()

# If either the version or url options are specified, we download the
# Cinema 4D SDK instead of assuming that we can derive it from the path
# of the currently executed package.
if options.version or options.url:
  if not options.url:
    options.url = "https://public.niklasrosenstein.com/cinema4dsdk/c4dsdk-${VERSION}.tar.gz"
  if options.version:
    options.url = options.url.replace('${VERSION}', options.version)
  elif '${VERSION}' in options.url:
    error('found ${VERSION} variable in .url option, but .version option is not set')

  options.directory = external_archive(options.url)
  if not options.release:
    options.release = int(float(options.version.split('-', 1)[0]))
elif not options.directory:
  options.directory = get_c4d_path_and_release()[0]

if not options.release:
  options.release = int(get_c4d_path_and_release()[1])
else:
  options.release = int(options.release)

logger.info('Maxon Cinema 4D SDK R{}'.format(options.version or options.release))

# Find important directories in the C4D installation.
dirs = Namespace()
dirs.c4d = options.directory
dirs.resource = path.join(dirs.c4d, 'resource')
if options.release <= 15:
  dirs.source = path.join(dirs.resource, '_api')
else:
  dirs.source = path.norm(path.join(dirs.c4d, 'frameworks/cinema.framework/source'))

# Gather all SDK source files.
sources = glob(['**/*.cpp'], parent = dirs.source)
if not sources:
  error('no C4D SDK sources found, source directory = "{}"'.format(dirs.source))

# Load the frameworks.
sdk, legacy_sdk = load_file('sdk.py').get_frameworks()
python = load_file('python.py').get_framework()

cxx = load('craftr.lang.cxx')
mode = 'debug' if options.debug else 'release'
c4d_sdk_library = cxx.static_library(
  output = 'cinema4d-{}-{}'.format(mode, cxx.cxc.target_arch),
  inputs = cxx.compile_cpp(
    sources = sources,
    source_directory = dirs.source,
    frameworks = [sdk]
  )
)
cxx.extend_framework(sdk, c4d_sdk_library)

# Export the C4D release into the global namespace to make it easier to
# retrieve from other modules.
release = options.release
