# Automatically generated using the Craftr maxon.c4d module

import os
import sys
import c4d

_frame = sys._getframe(1)
while _frame and not '__res__' in _frame.f_globals:
    _frame = _frame.f_back

project_path = os.path.dirname(_frame.f_globals['__file__'])
resource = _frame.f_globals['__res__']


def string(name, *subst, **kwargs):
    ''' Get a resource string by its symbolic name. Occurences of the
    ``#`` character can be replaced in-order with the parameters passed
    to *subst*.

    :param name: The name of the symbol or the symbol value as integer.
    :param subst: Additional arguments to replace ``#`` characters
        in the loaded string.
    :param disable: Keyword-only argument that, if passed True,
        appends ``&d&`` to the returned string.
    :param checked: Keyword-only argument that, if passed True,
        appends ``&c&`` to the returned string.
    '''

    disable = kwargs.pop('disable', False)
    checked = kwargs.pop('checked', False)
    if kwargs:
        raise TypeError('unexpected keyword arguments: ' + ','.join(kwargs))

    if isinstance(name, str):
        name = globals()[name]
    elif not isinstance(name, (int, long)):
        raise TypeError('name must be str, int or long')

    result = resource.LoadString(name)
    for item in subst:
        result = result.replace('#', str(item), 1)

    if disable:
        result += '&d&'
    if checked:
        result += '&c&'
    return result


def tup(name, *subst, **kwargs):
    ''' The same as :func:`string`, but returns a tuple with the
    first element being the symbol ID and the second the loaded
    string. This is useful for functions that require the symbol
    ID and the loaded string as arguments, for example
    :meth:`c4d.GeDialog.MenuAddString`.

    .. code-block:: python

        self.MenuAddString(res.IDS_MENU_HELP, res.string('IDS_MENU_HELP'))
        # Can be written as
        self.MenuAddString(*res.tup('IDS_MENU_HELP'))
    '''

    if isinstance(name, str):
        name = globals()[name]

    return (name, string(name, *subst))


def path(*parts):
    path = os.path.join(*parts)
    if not os.path.isabs(path):
        path = os.path.join(project_path, path)
    return path


def bitmap(*parts):
    bitmap = c4d.bitmaps.BaseBitmap()
    result, ismovie = bitmap.InitWith(file(*parts))
    if result != c4d.IMAGERESULT_OK:
        return None
    return bitmap

file = path  # backwards compatibility

{{symbols}}
