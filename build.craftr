# -*- coding: utf8 -*-
# The MIT License (MIT)
#
# Copyright (c) 2018  Niklas Rosenstein
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import functools
import re
import os, sys
import * from 'craftr'
import cxx from 'net.craftr.lang.cxx'
import {get_source_archive} from 'net.craftr.tool.download'
from craftr.utils import sh

project('net.maxon.c4d', '1.0-0')

options = module.options
options.add('directory', str, '')
options.add('release', str, '')
options.add('getsdk', bool, False)
options.add('rtti', bool, False)
options.add('sourceprocess', str, '')

if options.sourceprocess not in ('', 'always'):
  print('[Warning:] c4d:sourceprocess={!r} is invalid'.format(options.sourceprocess))
  options.sourceprocess = ''

if OS.id == 'win32': platform = 'win'
elif OS.id == 'darwin': platform = 'mac'
elif OS.id == 'linux': platform = 'linux'
else: error('unsupported OS: {!r}'.format(OS.id))


@functools.lru_cache()
def get_c4d_path_and_release():
  path = (options.directory or __file__) + '/'
  match = re.search(r'(.*Cinema\s+4D\s+R(\d+).*?[/\\])', path, re.I)
  if not match:
    error('C4D installation path could not be determined.')
  return match.groups()


def _init():
  # Determine the Cinema 4D directory automatically or fallback to downloading
  # a Cinema 4D SDK source archive.
  if not options.directory or options.getsdk:
    try:
      if options.release: error()
      options.directory = get_c4d_path_and_release()[0]
    except ModuleError:
      if options.release:
        url = fmt("https://public.niklasrosenstein.com/cinema4d/c4dsdkarchives/c4dsdk-{options.release}.tar.gz")
        options.directory = path.join(get_source_archive(url), 'c4dsdk-' + options.release)
      else:
        raise
  options.directory = path.canonical(options.directory)

  # Normalize the release name or fall back to the release name that
  # can be determined from the current project path.
  if options.release:
    options.release = int(float(options.release.split('-', 1)[0]))  # remove possible -llvm6fix suffix
  else:
    try:
      options.release = int(get_c4d_path_and_release()[1])
    except ModuleError as exc:
      error('C4D release could not be determined. Specify c4d:release option!')

_init()
print('Maxon Cinema 4D SDK R{} ({})'.format(options.release, options.directory))


dirs = {}
dirs['c4d'] = options.directory
dirs['resource'] = path.join(dirs['c4d'], 'resource')
if options.release <= 15:
  dirs['source'] = path.join(dirs['resource'], '_api')
else:
  dirs['source'] = path.norm(path.join(dirs['c4d'], 'frameworks/cinema.framework/source'))


release = options.release


@target(builders=[cxx.build])
def addons():
  """
  This target can be depended upon to add additional include directories
  for headers convenience headers provided by this build module.
  """

  properties({
    '@cxx.includes': ['include'],
    '@cxx.defines': ['CRAFTR_NET_MAXON_C4D_ISR20'] if release >= 20 else []
  })


if release < 20:
  if platform == 'win':
    plugin_suffix = '.cdl64' if cxx.compiler.is64bit else '.cdl'
  elif platform == 'mac':
    plugin_suffix = '.dylib'
  elif platform == 'linux':
    plugin_suffix = '.so'
  else: assert False

  @target(builders=[cxx.build])
  def sdk():
    ##
    # Compile the Cinema 4D SDK as a static library.
    ##

    sources = glob(['**/*.cpp'], parent = dirs['source'])
    if not sources:
      raise EnvironmentError('no C4D SDK sources found, source directory'
        ' = "{}"'.format(dirs['source']))

    # There's unity build files for C4D in R19.053+. We can use them instead
    # of the other sources, but we definitely need to use one or the other.
    if any(path.base(x) == '_unity0.cpp' for x in sources):
      s1 = [x for x in sources if path.base(x) in ('defaultallocator.cpp', 'debugglobals.cpp')]
      sources = [x for x in sources if path.base(x).startswith('_unity')] + s1
      del s1

    # Gather a list of the C4D include directories.
    include = [
      dirs['source'],
      dirs['source'] + '/c4d_customgui',
      dirs['source'] + '/c4d_gv',
      dirs['source'] + '/c4d_libs',
      dirs['source'] + '/c4d_misc',
      dirs['source'] + '/c4d_misc/datastructures',
      dirs['source'] + '/c4d_misc/memory',
      dirs['source'] + '/c4d_misc/utilities',
      dirs['source'] + '/c4d_preview',
      dirs['source'] + '/c4d_scaling',
      dirs['resource'] + '/res/description'
    ]
    if release <= 15:
      include += glob(['modules/*/res/description'], parent = dirs['resource'])
      include += glob(['modules/*/res/description'], parent = dirs['c4d'])
      include += glob(['modules/*/*/res/description'], parent = dirs['c4d'])
    else:
      include += glob(['modules/*/description'], parent = dirs['resource'])
    include = list(map(path.norm, include))

    ##
    # Construct the build target properties.
    ##

    if platform == 'win':
      defines = ['__PC']
      if release >= 15:
        defines += ['MAXON_API', 'MAXON_TARGET_WINDOWS']
        defines += ['MAXON_TARGET_DEBUG'] if BUILD.debug else ['MAXON_TARGET_RELEASE']
        if cxx.compiler.is64bit:
          defines += ['MAXON_TARGET_64BIT']
      else:
        defines += ['_DEBUG', 'DEBUG'] if BUILD.debug else ['NDEBUG']
        if cxx.compiler.is64bit:
          defines += ['__C4D_64BIT', 'WIN64', '_WIN64']
        else:
          defines += ['WIN32', '_WIN32']

      if BUILD.debug:
        flags = []
      else:
        # These are not set by the MSVC interface.
        flags = ['/Oy-', '/Oi', '/Ob2', '/Ot', '/GF']

      if cxx.compiler.id == 'msvc' and cxx.compiler.version >= '19.00.24':
        # Cinema 4D does not properly detect Visual Studio 2015 Update 3 and
        # adds `#define decltype typeof` in compilerdetection.h.
        defines += ['_HAS_DECLTYPE']

      properties({
        'cxx.srcs': sources,
        'cxx.type': 'library',
        'cxx.preferredLinkage': 'static',
        'cxx.productName': 'cinema4d-{}{}$(ext)'.format(cxx.compiler.arch, '' if BUILD.release else 'd'),
        '@cxx.includes': include,
        '@cxx.defines': defines,
        '@cxx.exceptions': False,
        '@cxx.rtti': options.rtti,
        '@cxx.cppStd': 'c++14',
        '@cxx.compilerFlags':  ( # TODO: Only for MSVC, not ClangCL?
          '/vmg /vms /w44263 /FC /errorReport:prompt /fp:precise /Zc:wchar_t- '
          '/Gd /TP /WX- /MP /Gm- /Gs /Gy-').split() + flags,
        '@cxx.msvcDisableWarnings': (
          '4062 4100 4127 4131 4201 4210 4242 4244 4245 4305 4310 4324 4355 '
          '4365 4389 4505 4512 4611 4706 4718 4740 4748 4996 4595 4458').split(),
        '@cxx.msvcWarningsAsErrors': [
          '4264', # virtual_function' : no override available for virtual member function from base 'class'; function is hidden
        ],
        #clangcl_compile_additional_flags = (
        #  '-Wno-unused-parameter -Wno-macro-redefined -Wno-microsoft-enum-value '
        #  '-Wno-unused-private-field'.split()
        #),
        #llvm_compile_additional_flags = (
        #  '-fms-memptr-rep=virtual -fms-memptr-rep=single'.split()  # /vmg /vms
        #),
      })

    elif platform in ('mac', 'linux'):
      stdlib = 'libstdc++' if release <= 15 else 'libc++'

      defines = []
      if platform == 'mac':
        defines += ['C4D_COCOA', '__MAC']
        if release >= 15:
          defines += ['MAXON_TARGET_OSX']
      elif platform == 'linux':
        defines += ['__LINUX']
        if release >= 15:
          defines += ['MAXON_TARGET_LINUX']
      else:
        assert False

      if release >= 15:
        defines += ['MAXON_API']
        defines += ['MAXON_TARGET_DEBUG'] if BUILD.debug else ['MAXON_TARGET_RELEASE']
        defines += ['MAXON_TARGET_64BIT']
      else:
        defines += ['_DEBUG', 'DEBUG'] if BUILD.debug else ['NDEBUG']
        defines += ['__C4D_64BIT']

      if release <= 15:
        flags = sh.split('''
          -fmessage-length=0 -Wno-trigraphs -Wno-missing-field-initializers
          -Wno-non-virtual-dtor -Woverloaded-virtual -Wmissing-braces
          -Wno-switch -Wunused-function -Wunused-label -Wno-unused-parameter
          -Wunused-variable -Wunused-value -Wno-empty-body -Wno-uninitialized
          -Wunknown-pragmas -Wno-shadow -Wno-conversion -fstrict-aliasing
          -Wdeprecated-declarations -Wno-invalid-offsetof -msse3 -fvisibility=hidden
          -fvisibility-inlines-hidden -Wno-sign-conversion -fno-math-errno''')
        if platform == 'mac':
          flags += sh.split('''
            -mmacosx-version-min=10.6 -Wno-int-conversion -Wno-logical-op-parentheses
            -Wno-shorten-64-to-32 -Wno-enum-conversion -Wno-bool-conversion
            -Wno-constant-conversion''')
      else:
        flags = sh.split('''
          -fmessage-length=0 -Wno-trigraphs -Wmissing-field-initializers
          -Wno-non-virtual-dtor -Woverloaded-virtual -Wmissing-braces
          -Wno-switch -Wunused-function -Wunused-label -Wno-unused-parameter
          -Wunused-variable -Wunused-value -Wempty-body -Wuninitialized
          -Wunknown-pragmas -Wshadow -Wno-conversion -Wsign-compare -fstrict-aliasing
          -Wdeprecated-declarations -Wno-invalid-offsetof -msse3 -fvisibility=hidden
          -fvisibility-inlines-hidden -Wno-sign-conversion -fno-math-errno''')
        if platform == 'mac':
          flags += sh.split('''
            -mmacosx-version-min=10.7 -Wconstant-conversion -Wbool-conversion
            -Wenum-conversion -Wshorten-64-to-32 -Wint-conversion''')

      if platform == 'mac':
        flags += sh.split('''
          -fdiagnostics-show-note-include-stack -fmacro-backtrace-limit=0
          -fpascal-strings -fasm-blocks -Wno-c++11-extensions -Wno-newline-eof
          -Wno-four-char-constants -Wno-exit-time-destructors
          -Wno-missing-prototypes''')
        # These flags are not usually set in the C4D SDK.
        flags += ['-Wno-unused-private-field']
      elif platform == 'linux':
        flags += sh.split('''
          -Wno-multichar -Wno-strict-aliasing -Wno-shadow -Wno-conversion-null''')

      forced_includes = []
      if platform == 'mac' and release <= 15:
        if BUILD.debug:
          forced_includes = [path.join(dirs['source'], 'ge_mac_debug_flags.h')]
        else:
          forced_includes = [path.join(dirs['source'], 'ge_mac_flags.h')]
        for f in ['__C4D_64BIT', '__MAC']:  # already in flags header
          try: defines.remove(f)
          except ValueError: pass

      properties({
        'cxx.srcs': sources,
        'cxx.type': 'library',
        'cxx.preferredLinkage': 'static',
        '@cxx.includes': include,
        '@cxx.defines': defines,
        '@cxx.exceptions': False,
        '@cxx.rtti': options.rtti,
        '@cxx.cppStd': 'c++11',
        '@cxx.cppStdlib': stdlib if cxx.compiler.id == 'llvm' else None,
        '@cxx.prefixHeaders': forced_includes,
        '@cxx.compilerFlags': flags
      })

    else:
      raise EnvironmentError('no configuration for platform: {!r}'.format(platform))


  @target(builders=[cxx.build])
  def legacy():
    depends([':sdk'], public=True)
    properties({
      '@cxx.defines': ['__LEGACY_API'],
      '@cxx.prefixHeaders': ['include/c4d_legacy.h']
    })

  @target(builders=[cxx.build])
  def python():
    if release >= 17:
      python_version = '2.7'
    elif release >= 12:
      python_version = '2.6'
    else:
      python_version = None

    if python_version:
      if release >= 16:
        resource = path.join(dirs['resource'], 'modules', 'python')
      else:
        resource = path.join(dirs['resource'], 'modules', 'python', 'res')

      if platform == 'win':
        arch = '86' if cxx.compiler.is32bit else '64'
        fw_path = path.join(resource, 'Python.win' + arch + '.framework')
        lib = 'python' + python_version.replace('.', '')
        lib_path = path.join(fw_path, 'libs', 'python' + python_version.replace('.', ''))

        # Check if the .lib exists in the subdirectory, otherwise the stuff
        # is directly in the directory above.
        if not path.isfile(path.join(lib_path, lib + '.lib')):
          lib_path = path.dir(lib_path)

        # There are multiple paths where the include directory could be.
        include = path.join(fw_path, 'include', 'python' + python_version.replace('.', ''))
        if not path.isdir(include):
          include = path.join(path.dir(include), 'python' + python_version)
        if not path.isdir(include):
          include = path.dir(include)

        properties({
          '@cxx.includes': [include],
          '@cxx.libraryPaths': [lib_path]
        })

      elif platform == 'mac':
        fw_path = path.join(resource, 'Python.osx.framework')
        lib = 'Python.osx'
        lib_path = fw_path
        lib_full_path = path.join(lib_path, lib)
        include = path.join(fw_path, 'include', 'python' + python_version)

        properties({
          '@cxx.includes': [include],
          '@cxx.staticLibraries': [lib_full_path]
        })

      elif platform == 'linux':
        # TODO: I THINK Cinema 4D comes with system Python? Gotta check.
        properties({
          '@cxx.systemLibraries': ['python']
        })

    else:
      # Don't do anything, the user will get an error that the "python" target
      # does not exist, and that is because Cinema 4D of that version doesn't
      # come with Python.
      pass

  build = cxx.build

else:
  if platform == 'win':
    assert cxx.compiler.is64bit
    plugin_suffix = '.xdl64'
  elif platform == 'mac':
    plugin_suffix = '.xlib'
  elif platform == 'linux':
    plugin_suffix = '.so'  # TODO
  else: assert False

  frameworks_dir = path.join(options.directory, 'frameworks')
  if not path.isdir(frameworks_dir):
    error('Frameworks directory not found. Did you unpack sdk.zip?')

  sourceprocessor_script = path.join(frameworks_dir, 'settings/sourceprocessor/sourceprocessor.py')
  if not path.isfile(sourceprocessor_script):
    error('Sourceprocessor not found at "{}"'.format(sourceprocessor_script))

  API_PLATFORM = {'win': 'Win64', 'mac': 'OSX', 'linux': 'Linux'}[platform]

  session.target_props.add('c4d.APIS', 'StringList', None)
  session.target_props.add('c4d.stylecheck', 'Dict', None, optional=True)
  session.target_props.add('c4d.ModuleId', 'String', None)
  session.target_props.add('c4d.SourceProcessor', 'Bool', True)

  def parse_projectdefinition(filename):
    """
    Parses a Cinema 4D projectdefinition.txt and returns a dictionary.
    """

    values = {}
    with open(filename) as fp:
      lines = enumerate(iter(fp), 1)
      for lineno, line in lines:
        stripped_line = line.strip()
        if not stripped_line or stripped_line.startswith('//'):
          continue
        key, sep, value = stripped_line.partition('=')
        if not sep:
          raise ValueError('Line {} has no `=` in "{}"'.format(lineno, filename))
        if not value.endswith('\\') and '//' in value:
          value = value.partition('//')[0].rstrip()
        while value.endswith('\\'):
          try:
            lineno, line = next(lines)
          except StopIteration:
            raise ValueError('Missing line continuation at {} in "{}"'.format(lineno, filename))
          value += line.strip()
        values[key] = value
    return values

  def get_framework(name):
    """
    Creates a target for the Cinema 4D framework with the specified *name*
    and returns it.
    """

    if name in module.scope.targets:
      return module.scope.targets[name]
    directory = path.join(frameworks_dir, name)

    with target(name, scope=module.scope, ctx=True):
      properties({'this.directory': directory})
      properties({'c4d.APIS': []})

      if name == 'core.framework':
        properties({
          '@cxx.defines+': {
            'win': ['MAXON_TARGET_WINDOWS'],
            'mac': ['MAXON_TARGET_MACOS', 'MAXON_TARGET_OSX'],
            'linux': ['MAXON_TARGET_LINUX']
          }[platform] + {
            'debug': ['MAXON_TARGET_DEBUG', 'DEBUG=DEBUG'],  # 'DEBUG' is used as an identifier in logger.h
            'release': ['MAXON_TARGET_RELEASE']
          }[BUILD.variant] + ['MAXON_API', 'USE_API_MAXON', 'MAXON_TARGET_64BIT', '__64BIT']
        })
        if platform == 'win':
          properties({
            '@cxx.defines+': ['_CRT_SECURE_NO_WARNINGS']
          })

      # TODO: Are these really hardcoded into the Project Tool?
      # I can't find these being defined in the projectdefinitions.txt
      if name == 'cinema.framework':
        properties({
          '@cxx.includes+': ['source/**']
        })
      elif name == 'core.framework':
        properties({
          '@cxx.includes+': ['source/maxon/math', 'source/maxon/utilities']
        })

      # Module IDs of Maxon frameworks are not defined in the projectdefinitions.txt.
      properties({'c4d.ModuleId': 'net.maxon.' + name})

      build()
      return current_target()

  def build():
    target = current_target()
    data = target.get_props('c4d.', as_object=True)

    APIS = target['c4d.APIS']
    projectdefinition = path.join(target.directory, 'project/projectdefinition.txt')
    if path.isfile(projectdefinition):
      def warn(*msg):
        print('[WARNING {}]: "{}":'.format(target.id, projectdefinition), *msg)
      defs = parse_projectdefinition(projectdefinition)
      if 'Platform' in defs and API_PLATFORM not in defs['Platform'].split(';'):
        warn('does not support platform "{}"'.format(API_PLATFORM))
      if 'Type' in defs and not target.properties.is_set('cxx.type'):
        if defs['Type'] == 'Lib':
          target['cxx.type'] = 'library'
          target['cxx.preferredLinkage'] = 'static'
        elif defs['Type'] == 'DLL':
          target['cxx.type'] = 'library'
          target['cxx.preferredLinkage'] = 'shared'
        #elif defs['Type'] == 'Exe': # TODO ??
        #  target['cxx.type'] = 'executable'
        else:
          warn('unexpected Type "{}"'.format(defs['Type']))
      if 'APIS' in defs:
        if APIS is None: APIS = []
        APIS += filter(bool, defs['APIS'].split(';'))
      for key in defs:
        if key.startswith('stylecheck.'):
          target['c4d.stylecheck+'] = {key[11:]: defs[key]}
        elif key == 'stylecheck':
          if defs[key] == 'false':
            target['c4d.stylecheck'] = None
      if 'ModuleId' in defs and not target['c4d.ModuleId']:
        target['c4d.ModuleId'] = defs['ModuleId']
      target['@cxx.includes+'] = ['source', 'generated/hxx']
      # TODO: Handle "unity" parameter with cxx.combineCSources/cxx.combineCppSources
      # TODO: Handle AdditionlIncludeDirectories etc.
      # TODO: Ignore excluded .cpp files (from projectdefinitions)
      if not target.properties.is_set('cxx.srcs'):
        sources = []
        excludes = ';'.join(defs.get(x, '') + ';' + defs.get(x + '.' + API_PLATFORM, '')
                            for x in ['Exclude', 'ExcludeFromBuild'])
        excludes = [x for x in excludes.split(';') if x]
        for x in glob('source/**/*.cpp'):
          excluded = False
          for ex in excludes:
            if ex.startswith('/'):
              if path.base(x).startswith(ex[1:]):
                excluded = True
                break
            else:
              print('[WARNING]: ({}) don\'t know how to handle exclude "{}"'.format(ex))
          if not excluded:
            sources.append(x)
        target['cxx.srcs+'] = sources
    elif APIS is None:
      APIS = ['cinema.framework']

    [depends(get_framework(x), True) for x in APIS or ()]

    module_id = target['c4d.ModuleId']
    if not module_id:
      error('[{}] no c4d.ModuleId'.format(target.id))

    register_cpp = None
    if target['c4d.SourceProcessor']:
      register_cpp = path.canonical(path.join(target.directory, 'generated/hxx/register.cpp'))
      depfile_name = register_cpp + '.d'

      command = [
        sys.executable,
        str(require.resolve('./scripts/sourceprocessor-wrapper.py').filename)
      ]

      if not path.isfile(projectdefinition):
        print('[WARNING]: "{}" does not exist. Craftr will write a temporary '
              'version of it during the build process.'.format(projectdefinition))
        command += ['--write-temp-projectdefinition']
        command += ['--module-id', module_id]
        command += ['--type', 'Dll']  # TODO: Use Lib if we're actually using Lib

      command += [
        sourceprocessor_script,
        target.directory,
        '--',
        '--singlethreaded'
      ]
      for k, v in (target['c4d.stylecheck'] or {}).items():
        command += ['--option', '{}={}'.format(k, v)]

      operator(
        'c4d.sourceprocessor',
        commands = [command],
        restat = True
      )
      build_set(
        {}, {'out': register_cpp},
        description = 'MAXON Source Preprocessor ({})'.format(target.directory),
        depfile = depfile_name
      )
      target['cxx.srcs+'] = [register_cpp]

      # Run the source processor at least once immediately.
      # This is a workaround for Cinema frameworks for which the
      # processor yields additional header files which are then
      # included by standard headers in the framework.
      # Currently we have no dependency that we can introduce between
      # running the source processor and the use of these headers in
      # other translation units.
      if options.sourceprocess == 'always' or not path.isdir(path.join(target.directory, 'generated')):
        from craftr.utils import sh
        command.remove('--singlethreaded')
        sh.run(command)

    properties({
      'cxx.defines+': ['MAXON_MODULE_ID="' + module_id + '"']
    })

    if not target.properties.is_set('cxx.cppStd'):
      if cxx.compiler.id == 'msvc':
        target['cxx.cppStd'] = 'c++latest'
      else:
        target['cxx.cppStd'] = 'c++17'

    # Note: Copied from the MSVC projects generated by the Maxon Project Tool.
    # Dude, these are a bunch of warnings they wanna ignore.
    if platform == 'win':
      target['cxx.msvcWarningsAsErrors+'] = ['4715']
      target['cxx.msvcDisableWarnings+'] = '4003;4061;4062;4100;4127;4131;4191;4265;4266;4296;4307;4324;4350;4351;4355;4365;4371;4458;4463;4464;4987;4503;4514;4519;4530;4548;4571;4574;4577;4592;4611;4623;4625;4626;4628;4640;4647;4668;4710;4711;4714;4738;4774;4820;4826;4917;4928;4946;5026;5027'.split(';')
      target['cxx.msvcCompilerFlags+'] = ['/Gy', '/RTC1', '/vmg', '/vms']
      target['cxx.msvcConformance+'] = ['wchar_t']

    if cxx.compiler.id != 'msvc' or 'clang' in cxx.compiler.name.lower():
      target['cxx.compilerFlags+'] = ['-msse4.2']

    if cxx.compiler.id == 'gcc':
      target['cxx.compilerFlags+'] = [
        '-fvisibility=hidden', '-fmessage-length=0', '-mssse3',
        '-Wno-maybe-uninitialized', '-D_GLIBCXX_USE_CXX11_ABI=0',
        '-std=gnu++14', '-Wno-multichar'
      ]

    if not target.properties.is_set('cxx.positionIndependentCode'):
      target['cxx.positionIndependentCode'] = True

    cxx.build()

    # Add register.cpp as dependency too all compile build sets to ensure
    # the source processor runs before any other translation unit.
    if register_cpp:
      for op in target.operators:
        if op.name.startswith('cxx.compileCpp#'):
          for bset in op.build_sets:
            if bset.inputs['src'][0] != register_cpp:
              bset.add_input_files('_register_cpp', [register_cpp])

  module.scope.targets['addons'].add_dependency(get_framework('network.framework'), public=True)

  target('sdk')
  depends(get_framework('cinema.framework'), public=True)

  target('legacy')
  depends([':addons', ':sdk'], public=True)
  # TODO: Provide legacy headers for R20 -> R19 commpatibility and
  #       make the include directory available in this target.

  import python from 'net.craftr.lang.python'
  if python.cfg['VERSION'] != '27':
    print('[WARNING]: Using net.maxon.c4d:python can result in '
          'compile and/or link errors, the Python version found '
          'on the system is {} but require 27 for Cinema 4D.'.format(python.cfg['VERSION']))


  target('python')
  depends(get_framework('python.framework'), public=True)
  depends('net.craftr.lang.python:python', public=True)
